// This file is auto-generated by @hey-api/openapi-ts

/**
 * the admin info for client side
 */
export type AdminInfo = {
    is_superuser: boolean;
    permissions: Array<BasePermissionInfo>;
    id: number;
    user: BaseUserInfo;
};

/**
 * the class for a barrier technique info
 */
export type BarrierTechInfo = {
    /**
     * the player's domain expansion
     */
    domain_expansion?: boolean;
    /**
     * the player's binding vow
     */
    binding_vow?: boolean;
    /**
     * the player's simple domain
     */
    simple_domain?: boolean;
    /**
     * the time a player cast their domain
     */
    de_end_time?: string | null;
    /**
     * the time a player cast their binding_vow
     */
    bv_end_time?: string | null;
    /**
     * the time a player cast their simple_domain
     */
    sd_end_time?: string | null;
    id: number;
};

/**
 * base admin info without the user info
 *
 * `is_superuser: bool | None`
 * `permissions: list[BasePermissionInfo]`
 */
export type BaseAdminInfo = {
    is_superuser: boolean;
    permissions: Array<BasePermissionInfo>;
};

/**
 * base model for cursed technique application info, without "ct_id", "ct"
 *
 * id: int
 * number: int
 */
export type BaseCtAppInfo = {
    /**
     * The name of the application, must be between 3 and 100 characters
     */
    name: string;
    /**
     * The application of the cursed technique, explaining how it is used or applied in practice
     */
    application: string;
    id: number;
    number: number;
};

/**
 * base model for ct info, without player info
 *
 * id: int
 * applications: list["BaseCTAppInfo"]
 */
export type BaseCtInfo = {
    /**
     * The name of the cursed technique, must be between 3 and 100 characters
     */
    name: string;
    /**
     * The definition of the cursed technique, explaining what it does without including its subsets
     */
    definition: string;
    id: number;
    applications: Array<BaseCtAppInfo>;
};

/**
 * base colony info without matches
 *
 * id: int
 */
export type BaseColonyInfo = {
    country: Country;
    id: number;
};

/**
 * base match info with the `winner`, but without players and colony infos.
 *
 * `id: int`
 * `winner: Union[BasePlayerInfo, None]`
 */
export type BaseMatchInfo = {
    begin: string;
    end: string;
    part: number;
    id: number;
    winner: BasePlayerInfo | null;
};

/**
 * base permission data, without id
 *
 * `name: str = Field(description="Permission name")`
 *
 * `level: BasePermission.PermissionLevel`
 */
export type BasePermissionInfo = {
    /**
     * The model the permission applies to
     */
    model: ModelName;
    /**
     * Permission name
     */
    name: string;
    level: PermissionLevel;
};

/**
 * Base model for player info, without cursed technique info and user info
 *
 * `id: int`
 * `created: date`
 * `grade: BasePlayer.Grade`
 * `points: Decimal`
 */
export type BasePlayerInfo = {
    /**
     * The name of the player, must be between 2 and 50 characters
     */
    name: string;
    gender: Gender;
    age: number;
    /**
     * The role of the player, e.g., doctor, lawyer, student, curse user, sorcerer etc.
     */
    role?: string | null;
    id: number;
    created: string;
    grade: Grade;
    points: number;
};

/**
 * Base model for user info, without player info
 *
 * `id: int`
 * `created: date`
 */
export type BaseUserInfo = {
    /**
     * the username of the user
     */
    username: string;
    /**
     * the email address of the user
     */
    email: string;
    /**
     * the country of origin of the user
     */
    country?: Country | null;
    id: number;
    /**
     * the date the account was created
     */
    created: string;
};

/**
 * #### Base vote info: Inherits from `BaseVote`
 *
 * `user_id: int = Field(description='the id of the user that casted their votes')`
 * `point: float = Field(description="the point a vote carries")`
 */
export type BaseVoteInfo = {
    player_id?: number | null;
    ct_app_id?: number | null;
    id: number;
    /**
     * the id of the user that casted their votes
     */
    user_id: number;
    /**
     * the point a vote carries
     */
    point: number;
    /**
     * whether or not the vote point has been added to a player's point
     */
    has_been_added?: boolean;
};

export type BodyCreatePlayer = {
    player: CreatePlayer;
    cursed_technique: CreateCt;
    applications: [
        CreateCtApp,
        CreateCtApp,
        CreateCtApp,
        CreateCtApp,
        CreateCtApp
    ];
};

export type BodyCreateToken = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type BodyEditPlayer = {
    player?: EditPlayer | null;
    cursed_technique?: EditCt | null;
    applications?: Array<EditCtApp> | null;
};

/**
 * model for collecting data to cast a vote
 */
export type CastVote = {
    player_id: number;
    ct_app_id: number;
};

export type ClientVoteInfo = {
    message: string;
    votes: Array<BaseVoteInfo>;
};

/**
 * colony info -> client-side
 */
export type ColonyInfo = {
    country: Country;
    id: number;
    players: Array<BasePlayerInfo>;
};

export type Country = 'AF' | 'AL' | 'DZ' | 'AD' | 'AO' | 'AG' | 'AR' | 'AM' | 'AU' | 'AT' | 'AZ' | 'BS' | 'BH' | 'BD' | 'BB' | 'BY' | 'BE' | 'BZ' | 'BJ' | 'BT' | 'BO' | 'BA' | 'BW' | 'BR' | 'BN' | 'BG' | 'BF' | 'BI' | 'CV' | 'KH' | 'CM' | 'CA' | 'CF' | 'TD' | 'CL' | 'CN' | 'CO' | 'KM' | 'CG' | 'CD' | 'CR' | 'HR' | 'CU' | 'CY' | 'CZ' | 'DK' | 'DJ' | 'DM' | 'DO' | 'EC' | 'EG' | 'SV' | 'GQ' | 'ER' | 'EE' | 'SZ' | 'ET' | 'FJ' | 'FI' | 'FR' | 'GA' | 'GM' | 'GE' | 'DE' | 'GH' | 'GR' | 'GD' | 'GT' | 'GN' | 'GW' | 'GY' | 'HT' | 'HN' | 'HU' | 'IS' | 'IN' | 'ID' | 'IR' | 'IQ' | 'IE' | 'IL' | 'IT' | 'JM' | 'JP' | 'JO' | 'KZ' | 'KE' | 'KI' | 'XK' | 'KW' | 'KG' | 'LA' | 'LV' | 'LB' | 'LS' | 'LR' | 'LY' | 'LI' | 'LT' | 'LU' | 'MG' | 'MW' | 'MY' | 'MV' | 'ML' | 'MT' | 'MH' | 'MR' | 'MU' | 'MX' | 'FM' | 'MD' | 'MC' | 'MN' | 'ME' | 'MA' | 'MZ' | 'MM' | 'NA' | 'NR' | 'NP' | 'NL' | 'NZ' | 'NI' | 'NE' | 'NG' | 'KP' | 'MK' | 'NO' | 'OM' | 'PK' | 'PW' | 'PS' | 'PA' | 'PG' | 'PY' | 'PE' | 'PH' | 'PL' | 'PT' | 'QA' | 'RO' | 'RU' | 'RW' | 'KN' | 'LC' | 'VC' | 'WS' | 'SM' | 'ST' | 'SA' | 'SN' | 'RS' | 'SC' | 'SL' | 'SG' | 'SK' | 'SI' | 'SB' | 'SO' | 'ZA' | 'KR' | 'SS' | 'ES' | 'LK' | 'SD' | 'SR' | 'SE' | 'CH' | 'SY' | 'TW' | 'TJ' | 'TZ' | 'TH' | 'TL' | 'TG' | 'TO' | 'TT' | 'TN' | 'TR' | 'TM' | 'TV' | 'UG' | 'UA' | 'AE' | 'GB' | 'US' | 'UY' | 'UZ' | 'VU' | 'VA' | 'VE' | 'VN' | 'YE' | 'ZM' | 'ZW';

export const Country = {
    AF: 'AF',
    AL: 'AL',
    DZ: 'DZ',
    AD: 'AD',
    AO: 'AO',
    AG: 'AG',
    AR: 'AR',
    AM: 'AM',
    AU: 'AU',
    AT: 'AT',
    AZ: 'AZ',
    BS: 'BS',
    BH: 'BH',
    BD: 'BD',
    BB: 'BB',
    BY: 'BY',
    BE: 'BE',
    BZ: 'BZ',
    BJ: 'BJ',
    BT: 'BT',
    BO: 'BO',
    BA: 'BA',
    BW: 'BW',
    BR: 'BR',
    BN: 'BN',
    BG: 'BG',
    BF: 'BF',
    BI: 'BI',
    CV: 'CV',
    KH: 'KH',
    CM: 'CM',
    CA: 'CA',
    CF: 'CF',
    TD: 'TD',
    CL: 'CL',
    CN: 'CN',
    CO: 'CO',
    KM: 'KM',
    CG: 'CG',
    CD: 'CD',
    CR: 'CR',
    HR: 'HR',
    CU: 'CU',
    CY: 'CY',
    CZ: 'CZ',
    DK: 'DK',
    DJ: 'DJ',
    DM: 'DM',
    DO: 'DO',
    EC: 'EC',
    EG: 'EG',
    SV: 'SV',
    GQ: 'GQ',
    ER: 'ER',
    EE: 'EE',
    SZ: 'SZ',
    ET: 'ET',
    FJ: 'FJ',
    FI: 'FI',
    FR: 'FR',
    GA: 'GA',
    GM: 'GM',
    GE: 'GE',
    DE: 'DE',
    GH: 'GH',
    GR: 'GR',
    GD: 'GD',
    GT: 'GT',
    GN: 'GN',
    GW: 'GW',
    GY: 'GY',
    HT: 'HT',
    HN: 'HN',
    HU: 'HU',
    IS: 'IS',
    IN: 'IN',
    ID: 'ID',
    IR: 'IR',
    IQ: 'IQ',
    IE: 'IE',
    IL: 'IL',
    IT: 'IT',
    JM: 'JM',
    JP: 'JP',
    JO: 'JO',
    KZ: 'KZ',
    KE: 'KE',
    KI: 'KI',
    XK: 'XK',
    KW: 'KW',
    KG: 'KG',
    LA: 'LA',
    LV: 'LV',
    LB: 'LB',
    LS: 'LS',
    LR: 'LR',
    LY: 'LY',
    LI: 'LI',
    LT: 'LT',
    LU: 'LU',
    MG: 'MG',
    MW: 'MW',
    MY: 'MY',
    MV: 'MV',
    ML: 'ML',
    MT: 'MT',
    MH: 'MH',
    MR: 'MR',
    MU: 'MU',
    MX: 'MX',
    FM: 'FM',
    MD: 'MD',
    MC: 'MC',
    MN: 'MN',
    ME: 'ME',
    MA: 'MA',
    MZ: 'MZ',
    MM: 'MM',
    NA: 'NA',
    NR: 'NR',
    NP: 'NP',
    NL: 'NL',
    NZ: 'NZ',
    NI: 'NI',
    NE: 'NE',
    NG: 'NG',
    KP: 'KP',
    MK: 'MK',
    NO: 'NO',
    OM: 'OM',
    PK: 'PK',
    PW: 'PW',
    PS: 'PS',
    PA: 'PA',
    PG: 'PG',
    PY: 'PY',
    PE: 'PE',
    PH: 'PH',
    PL: 'PL',
    PT: 'PT',
    QA: 'QA',
    RO: 'RO',
    RU: 'RU',
    RW: 'RW',
    KN: 'KN',
    LC: 'LC',
    VC: 'VC',
    WS: 'WS',
    SM: 'SM',
    ST: 'ST',
    SA: 'SA',
    SN: 'SN',
    RS: 'RS',
    SC: 'SC',
    SL: 'SL',
    SG: 'SG',
    SK: 'SK',
    SI: 'SI',
    SB: 'SB',
    SO: 'SO',
    ZA: 'ZA',
    KR: 'KR',
    SS: 'SS',
    ES: 'ES',
    LK: 'LK',
    SD: 'SD',
    SR: 'SR',
    SE: 'SE',
    CH: 'CH',
    SY: 'SY',
    TW: 'TW',
    TJ: 'TJ',
    TZ: 'TZ',
    TH: 'TH',
    TL: 'TL',
    TG: 'TG',
    TO: 'TO',
    TT: 'TT',
    TN: 'TN',
    TR: 'TR',
    TM: 'TM',
    TV: 'TV',
    UG: 'UG',
    UA: 'UA',
    AE: 'AE',
    GB: 'GB',
    US: 'US',
    UY: 'UY',
    UZ: 'UZ',
    VU: 'VU',
    VA: 'VA',
    VE: 'VE',
    VN: 'VN',
    YE: 'YE',
    ZM: 'ZM',
    ZW: 'ZW'
} as const;

/**
 * for creating cursed technique
 */
export type CreateCt = {
    /**
     * The name of the cursed technique, must be between 3 and 100 characters
     */
    name: string;
    /**
     * The definition of the cursed technique, explaining what it does without including its subsets
     */
    definition: string;
};

/**
 * for creating a cursed technique application
 */
export type CreateCtApp = {
    /**
     * The name of the application, must be between 3 and 100 characters
     */
    name: string;
    /**
     * The application of the cursed technique, explaining how it is used or applied in practice
     */
    application: string;
};

/**
 * for creating a permission; requires a model name, and a permission level
 */
export type CreatePermission = {
    /**
     * The model the permission applies to
     */
    model: ModelName;
    level: Array<PermissionLevel>;
};

/**
 * For creating a Player
 */
export type CreatePlayer = {
    /**
     * The name of the player, must be between 2 and 50 characters
     */
    name: string;
    gender: Gender;
    age: number;
    /**
     * The role of the player, e.g., doctor, lawyer, student, curse user, sorcerer etc.
     */
    role?: string | null;
};

/**
 * For creating a user
 */
export type CreateUser = {
    /**
     * the username of the user
     */
    username: string;
    /**
     * the email address of the user
     */
    email: string;
    /**
     * the country of origin of the user
     */
    country?: Country | null;
    /**
     * the user's password
     */
    password: string;
    /**
     * the user's password
     */
    confirm_password: string;
};

/**
 * for editing a cursed technique
 */
export type EditCt = {
    /**
     * The name of the cursed technique, must be between 3 and 100 characters
     */
    name?: string | null;
    /**
     * The definition of the cursed technique, explaining what it does without including its subsets
     */
    definition?: string | null;
};

/**
 * for editing a cursed technique application
 */
export type EditCtApp = {
    number: number;
    /**
     * The name of the application, must be between 3 and 100 characters
     */
    name?: string | null;
    /**
     * The application of the cursed technique, explaining how it is used or applied in practice
     */
    application?: string | null;
};

/**
 * For editing a Player
 */
export type EditPlayer = {
    /**
     * The name of the player, must be between 2 and 50 characters
     */
    name?: string | null;
    gender?: Gender | null;
    age?: number | null;
    /**
     * The role of the player, e.g., doctor, lawyer, student, curse user, sorcerer etc.
     */
    role?: string | null;
};

/**
 * For editing a User
 */
export type EditUser = {
    username?: string | null;
    email?: string | null;
    country?: Country | null;
};

/**
 * the player gender options
 */
export type Gender = 'male' | 'female' | 'non-binary';

/**
 * the player gender options
 */
export const Gender = {
    MALE: 'male',
    FEMALE: 'female',
    NON_BINARY: 'non-binary'
} as const;

/**
 * the enum class for player grades
 */
export type Grade = 0 | 1 | 2 | 3 | 4;

/**
 * the enum class for player grades
 */
export const Grade = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4
} as const;

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * match info for client side
 */
export type MatchInfo = {
    begin: string;
    end: string;
    part: number;
    id: number;
    winner: BasePlayerInfo | null;
    players: Array<BasePlayerInfo>;
    colony: BaseColonyInfo;
};

export type ModelName = 'colony' | 'user' | 'barriertech' | 'barrierrecord' | 'player' | 'cursedtechnique' | 'ctapp' | 'match' | 'vote' | 'adminuser' | 'permission';

export const ModelName = {
    COLONY: 'colony',
    USER: 'user',
    BARRIERTECH: 'barriertech',
    BARRIERRECORD: 'barrierrecord',
    PLAYER: 'player',
    CURSEDTECHNIQUE: 'cursedtechnique',
    CTAPP: 'ctapp',
    MATCH: 'match',
    VOTE: 'vote',
    ADMINUSER: 'adminuser',
    PERMISSION: 'permission'
} as const;

export type PermissionInfo = {
    /**
     * The model the permission applies to
     */
    model: ModelName;
    /**
     * Permission name
     */
    name: string;
    level: PermissionLevel;
    id: number;
};

export type PermissionLevel = 1 | 2 | 3 | 4;

export const PermissionLevel = {
    1: 1,
    2: 2,
    3: 3,
    4: 4
} as const;

/**
 * Player info with cursed technique, user, and colony info
 */
export type PlayerInfo = {
    /**
     * The name of the player, must be between 2 and 50 characters
     */
    name: string;
    gender: Gender;
    age: number;
    /**
     * The role of the player, e.g., doctor, lawyer, student, curse user, sorcerer etc.
     */
    role?: string | null;
    id: number;
    created: string;
    grade: Grade;
    points: number;
    cursed_technique: BaseCtInfo;
    barrier_technique: BarrierTechInfo | null;
    colony: BaseColonyInfo | null;
    user: BaseUserInfo | null;
    matches: Array<BaseMatchInfo>;
};

export type Token = {
    access_token: string;
    token_type: string;
};

/**
 * The user info
 */
export type UserInfo = {
    /**
     * the username of the user
     */
    username: string;
    /**
     * the email address of the user
     */
    email: string;
    /**
     * the country of origin of the user
     */
    country?: Country | null;
    id: number;
    /**
     * the date the account was created
     */
    created: string;
    player?: BasePlayerInfo | null;
    admin?: BaseAdminInfo | null;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type CurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type CurrentUserResponses = {
    /**
     * A User
     */
    200: UserInfo;
};

export type CurrentUserResponse = CurrentUserResponses[keyof CurrentUserResponses];

export type AuserData = {
    body?: never;
    path: {
        /**
         * The user's Id, Username, or Email
         */
        user: number | string;
    };
    query?: never;
    url: '/users/{user}';
};

export type AuserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuserError = AuserErrors[keyof AuserErrors];

export type AuserResponses = {
    /**
     * A User
     */
    200: UserInfo;
};

export type AuserResponse = AuserResponses[keyof AuserResponses];

export type EditUserData = {
    body: EditUser;
    path: {
        /**
         * The user's Id, Username, or Email
         */
        user: number | string;
    };
    query?: never;
    url: '/users/edit/{user}';
};

export type EditUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EditUserError = EditUserErrors[keyof EditUserErrors];

export type EditUserResponses = {
    /**
     * Edited User
     */
    200: UserInfo;
};

export type EditUserResponse = EditUserResponses[keyof EditUserResponses];

export type DeleteUserData = {
    body?: never;
    path: {
        /**
         * The user's Id, Username, or Email
         */
        user: number | string;
    };
    query?: never;
    url: '/users/delete/{user}';
};

export type DeleteUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
    /**
     * Deleted User
     */
    200: UserInfo;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type CreatePlayerData = {
    body: BodyCreatePlayer;
    path: {
        /**
         * The user's Id, Username, or Email
         */
        user: number | string;
    };
    query?: never;
    url: '/player/create/{user}';
};

export type CreatePlayerErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreatePlayerError = CreatePlayerErrors[keyof CreatePlayerErrors];

export type CreatePlayerResponses = {
    /**
     * New Player
     */
    201: PlayerInfo;
};

export type CreatePlayerResponse = CreatePlayerResponses[keyof CreatePlayerResponses];

export type MyPlayerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/player/me';
};

export type MyPlayerResponses = {
    /**
     * A Player
     */
    200: PlayerInfo;
};

export type MyPlayerResponse = MyPlayerResponses[keyof MyPlayerResponses];

export type GetPlayersData = {
    body?: never;
    path?: never;
    query?: {
        offset?: number;
        limit?: number;
        /**
         * If true, minimal player info will be returned
         */
        slim?: boolean;
        gender?: Gender | null;
        age?: number | null;
        role?: string | null;
    };
    url: '/player/all';
};

export type GetPlayersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPlayersError = GetPlayersErrors[keyof GetPlayersErrors];

export type GetPlayersResponses = {
    /**
     * A list of players
     */
    200: Array<PlayerInfo> | Array<BasePlayerInfo>;
};

export type GetPlayersResponse = GetPlayersResponses[keyof GetPlayersResponses];

export type APlayerData = {
    body?: never;
    path: {
        player_id: number;
    };
    query?: never;
    url: '/player/{player_id}';
};

export type APlayerErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type APlayerError = APlayerErrors[keyof APlayerErrors];

export type APlayerResponses = {
    /**
     * A Player
     */
    200: PlayerInfo;
};

export type APlayerResponse = APlayerResponses[keyof APlayerResponses];

export type EditPlayerData = {
    body?: BodyEditPlayer;
    path: {
        player_id: number;
    };
    query?: never;
    url: '/player/edit/{player_id}';
};

export type EditPlayerErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EditPlayerError = EditPlayerErrors[keyof EditPlayerErrors];

export type EditPlayerResponses = {
    /**
     * Edited Player
     */
    200: PlayerInfo;
};

export type EditPlayerResponse = EditPlayerResponses[keyof EditPlayerResponses];

export type DeletePlayerData = {
    body?: never;
    path: {
        player_id: number;
    };
    query?: never;
    url: '/player/delete/{player_id}';
};

export type DeletePlayerErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeletePlayerError = DeletePlayerErrors[keyof DeletePlayerErrors];

export type DeletePlayerResponses = {
    /**
     * A deleted player
     */
    200: PlayerInfo;
};

export type DeletePlayerResponse = DeletePlayerResponses[keyof DeletePlayerResponses];

export type UpgradePlayerData = {
    body?: never;
    path: {
        /**
         * the player id
         */
        player_id: number;
    };
    query: {
        /**
         * specified upgrade
         */
        grade_up: Grade;
    };
    url: '/player/upgrade/{player_id}';
};

export type UpgradePlayerErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpgradePlayerError = UpgradePlayerErrors[keyof UpgradePlayerErrors];

export type UpgradePlayerResponses = {
    /**
     * Successful Response
     */
    200: PlayerInfo;
};

export type UpgradePlayerResponse = UpgradePlayerResponses[keyof UpgradePlayerResponses];

export type CreateMatchData = {
    body?: never;
    path?: never;
    query: {
        part: number;
    };
    url: '/match/create';
};

export type CreateMatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateMatchError = CreateMatchErrors[keyof CreateMatchErrors];

export type CreateMatchResponses = {
    /**
     * Successful Response
     */
    201: MatchInfo;
};

export type CreateMatchResponse = CreateMatchResponses[keyof CreateMatchResponses];

export type GetMatchesData = {
    body?: never;
    path?: never;
    query?: {
        offset?: number;
        limit?: number;
    };
    url: '/match/all';
};

export type GetMatchesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMatchesError = GetMatchesErrors[keyof GetMatchesErrors];

export type GetMatchesResponses = {
    /**
     * Successful Response
     */
    200: Array<MatchInfo>;
};

export type GetMatchesResponse = GetMatchesResponses[keyof GetMatchesResponses];

export type GetLastestMatchData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * should be an ongoing match
         */
        ongoing?: boolean;
    };
    url: '/match/latest';
};

export type GetLastestMatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetLastestMatchError = GetLastestMatchErrors[keyof GetLastestMatchErrors];

export type GetLastestMatchResponses = {
    /**
     * Successful Response
     */
    200: MatchInfo;
};

export type GetLastestMatchResponse = GetLastestMatchResponses[keyof GetLastestMatchResponses];

export type VoteData = {
    body: Array<CastVote>;
    path: {
        match_id: number;
    };
    query?: never;
    url: '/match/vote/{match_id}';
};

export type VoteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VoteError = VoteErrors[keyof VoteErrors];

export type VoteResponses = {
    /**
     * Successful Response
     */
    200: ClientVoteInfo;
};

export type VoteResponse = VoteResponses[keyof VoteResponses];

export type DomainExpansionData = {
    body?: never;
    path: {
        player_id: number;
    };
    query: {
        match_id: number;
    };
    url: '/match/activate/domain/{player_id}';
};

export type DomainExpansionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DomainExpansionError = DomainExpansionErrors[keyof DomainExpansionErrors];

export type DomainExpansionResponses = {
    /**
     * Successful Response
     */
    200: BarrierTechInfo;
};

export type DomainExpansionResponse = DomainExpansionResponses[keyof DomainExpansionResponses];

export type SimpleDomainData = {
    body?: never;
    path: {
        player_id: number;
    };
    query: {
        match_id: number;
    };
    url: '/match/activate/simple/{player_id}';
};

export type SimpleDomainErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SimpleDomainError = SimpleDomainErrors[keyof SimpleDomainErrors];

export type SimpleDomainResponses = {
    /**
     * Successful Response
     */
    200: BarrierTechInfo;
};

export type SimpleDomainResponse = SimpleDomainResponses[keyof SimpleDomainResponses];

export type DeleteMatchData = {
    body?: never;
    path: {
        match_id: number;
    };
    query?: never;
    url: '/match/delete/{match_id}';
};

export type DeleteMatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteMatchError = DeleteMatchErrors[keyof DeleteMatchErrors];

export type DeleteMatchResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateAdminData = {
    body: Array<CreatePermission>;
    path: {
        /**
         * The user's Id, Username, or Email
         */
        user: number | string;
    };
    query?: never;
    url: '/admin/create/{user}';
};

export type CreateAdminErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateAdminError = CreateAdminErrors[keyof CreateAdminErrors];

export type CreateAdminResponses = {
    /**
     * Successful Response
     */
    200: AdminInfo;
};

export type CreateAdminResponse = CreateAdminResponses[keyof CreateAdminResponses];

export type NewPermissionData = {
    body: Array<CreatePermission>;
    path?: never;
    query?: never;
    url: '/admin/new/permission';
};

export type NewPermissionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type NewPermissionError = NewPermissionErrors[keyof NewPermissionErrors];

export type NewPermissionResponses = {
    /**
     * Successful Response
     */
    200: Array<PermissionInfo>;
};

export type NewPermissionResponse = NewPermissionResponses[keyof NewPermissionResponses];

export type DemoSuperuserData = {
    body?: never;
    path: {
        /**
         * The user's Id, Username, or Email
         */
        user: number | string;
    };
    query: {
        code: string;
    };
    url: '/admin/superuser/{user}';
};

export type DemoSuperuserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DemoSuperuserError = DemoSuperuserErrors[keyof DemoSuperuserErrors];

export type DemoSuperuserResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetColoniesData = {
    body?: never;
    path?: never;
    query?: {
        offset?: number;
        limit?: number;
    };
    url: '/colony/all';
};

export type GetColoniesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetColoniesError = GetColoniesErrors[keyof GetColoniesErrors];

export type GetColoniesResponses = {
    /**
     * Successful Response
     */
    200: Array<ColonyInfo>;
};

export type GetColoniesResponse = GetColoniesResponses[keyof GetColoniesResponses];

export type CreateTokenData = {
    body: BodyCreateToken;
    path?: never;
    query?: never;
    url: '/login';
};

export type CreateTokenErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTokenError = CreateTokenErrors[keyof CreateTokenErrors];

export type CreateTokenResponses = {
    /**
     * A Token
     */
    200: Token;
};

export type CreateTokenResponse = CreateTokenResponses[keyof CreateTokenResponses];

export type CreateUserData = {
    /**
     * The details for creating a User
     */
    body: CreateUser;
    path?: never;
    query?: never;
    url: '/signup';
};

export type CreateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
    /**
     * New User
     */
    201: UserInfo;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};