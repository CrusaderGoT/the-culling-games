// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-next';
import type { CurrentUserData, CurrentUserResponse, AuserData, AuserResponse, AuserError, EditUserData, EditUserResponse, EditUserError, DeleteUserData, DeleteUserResponse, DeleteUserError, CreatePlayerData, CreatePlayerResponse, CreatePlayerError, MyPlayerData, MyPlayerResponse, GetPlayersData, GetPlayersResponse, GetPlayersError, APlayerData, APlayerResponse, APlayerError, EditPlayerData, EditPlayerResponse, EditPlayerError, DeletePlayerData, DeletePlayerResponse, DeletePlayerError, UpgradePlayerData, UpgradePlayerResponse, UpgradePlayerError, CreateMatchData, CreateMatchResponse, CreateMatchError, GetMatchesData, GetMatchesResponse, GetMatchesError, GetLastestMatchData, GetLastestMatchResponse, GetLastestMatchError, VoteData, VoteResponse, VoteError, DomainExpansionData, DomainExpansionResponse, DomainExpansionError, SimpleDomainData, SimpleDomainResponse, SimpleDomainError, DeleteMatchData, DeleteMatchError, CreateAdminData, CreateAdminResponse, CreateAdminError, NewPermissionData, NewPermissionResponse, NewPermissionError, DemoSuperuserData, DemoSuperuserError, GetColoniesData, GetColoniesResponse, GetColoniesError, CreateTokenData, CreateTokenResponse, CreateTokenError, CreateUserData, CreateUserResponse, CreateUserError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class UsersService {
    /**
     * Get the logged in user
     */
    public static currentUser<ThrowOnError extends boolean = false>(options?: Options<CurrentUserData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<CurrentUserResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/me',
            ...options
        });
    }
    
    /**
     * Get a user.
     */
    public static aUser<ThrowOnError extends boolean = false>(options: Options<AuserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<AuserResponse, AuserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/{user}',
            ...options
        });
    }
    
    /**
     * Edit a user.
     */
    public static editUser<ThrowOnError extends boolean = false>(options: Options<EditUserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<EditUserResponse, EditUserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/edit/{user}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Delete a user.
     * Deleting a user will _set null_ on the *player* if any.
     */
    public static deleteUser<ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteUserResponse, DeleteUserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/delete/{user}',
            ...options
        });
    }
    
    /**
     * Create a new User
     */
    public static createUser<ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<CreateUserResponse, CreateUserError, ThrowOnError>({
            url: '/signup',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class PlayersService {
    /**
     * Create a new player
     */
    public static createPlayer<ThrowOnError extends boolean = false>(options: Options<CreatePlayerData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<CreatePlayerResponse, CreatePlayerError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/player/create/{user}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Get a player of the logged in user
     */
    public static myPlayer<ThrowOnError extends boolean = false>(options?: Options<MyPlayerData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<MyPlayerResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/player/me',
            ...options
        });
    }
    
    /**
     * Get a list of players.
     */
    public static getPlayers<ThrowOnError extends boolean = false>(options?: Options<GetPlayersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPlayersResponse, GetPlayersError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/player/all',
            ...options
        });
    }
    
    /**
     * Get a player with their ID
     */
    public static aPlayer<ThrowOnError extends boolean = false>(options: Options<APlayerData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<APlayerResponse, APlayerError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/player/{player_id}',
            ...options
        });
    }
    
    /**
     * Edit a player details.
     * If an application is sent, it should have a valid number for the application you want to edit.
     *
     * To check an application number, first get a player info using the **'/players/{player_id}'** request.
     *
     * Else the application will be disregarded, valid numbers are 1-5.
     */
    public static editPlayer<ThrowOnError extends boolean = false>(options: Options<EditPlayerData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<EditPlayerResponse, EditPlayerError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/player/edit/{player_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Delete a player
     */
    public static deletePlayer<ThrowOnError extends boolean = false>(options: Options<DeletePlayerData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeletePlayerResponse, DeletePlayerError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/player/delete/{player_id}',
            ...options
        });
    }
    
    /**
     * Upgrade Player
     * function for uprading the grade of a player.
     *
     * **points required.**
     */
    public static upgradePlayer<ThrowOnError extends boolean = false>(options: Options<UpgradePlayerData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<UpgradePlayerResponse, UpgradePlayerError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/player/upgrade/{player_id}',
            ...options
        });
    }
    
}

export class MatchesService {
    /**
     * Create Match
     * path operation for automatically creating a match, requires a part query.
     */
    public static createMatch<ThrowOnError extends boolean = false>(options: Options<CreateMatchData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<CreateMatchResponse, CreateMatchError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/match/create',
            ...options
        });
    }
    
    /**
     * Get Matches
     * get all matches
     */
    public static getMatches<ThrowOnError extends boolean = false>(options?: Options<GetMatchesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMatchesResponse, GetMatchesError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/match/all',
            ...options
        });
    }
    
    /**
     * Get Lastest Match
     * get last created match
     */
    public static getLastestMatch<ThrowOnError extends boolean = false>(options?: Options<GetLastestMatchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetLastestMatchResponse, GetLastestMatchError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/match/latest',
            ...options
        });
    }
    
    /**
     * Vote
     * function for casting votes
     *
     * - a match id is required
     * - if an invalid vote cursed application id or player id is submitted, they are ignored.
     */
    public static vote<ThrowOnError extends boolean = false>(options: Options<VoteData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<VoteResponse, VoteError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/match/vote/{match_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Domain Expansion
     * Activates the domain of a player in an ongoing match.
     *
     * Buffs the vote to x4 per vote.
     *
     * Weakend by simple domain
     */
    public static domainExpansion<ThrowOnError extends boolean = false>(options: Options<DomainExpansionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<DomainExpansionResponse, DomainExpansionError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/match/activate/domain/{player_id}',
            ...options
        });
    }
    
    /**
     * Simple Domain
     * Activates the simple domain effect for a player during an ongoing match. The simple domain interaction
     * modifies the opponent's capabilities based on their current domain status:
     * - If the opponent's domain expansion is inactive, it halves the effect of their vote per action.
     * - If the domain expansion is active, it weakens its effect.
     *
     * Parameters:
     * player_id (int): Unique identifier for the player whose simple domain is being activated.
     * match_id (int): The match identifier provided as a query parameter.
     * current_user (active_user): The currently authenticated user executing the action.
     * session (session): Database session for transactional operations and data retrieval.
     * background (BackgroundTasks): Background task manager to schedule asynchronous deactivation.
     * atp (atp): Configuration containing limitations, including limits on the number of activations
     * per match for the simple domain.
     *
     * Returns:
     * BarrierTech: An updated BarrierTech object reflecting the current state and timing details of
     * the simple domain effect.
     *
     * Raises:
     * HTTPException:
     * - If the player has already reached the activation limit for the simple domain in the match.
     * - If the simple domain is already active and the deactivation time has not passed.
     *
     * Notes:
     * This function checks relevant conditions before activating the simple domain, including limits
     * and current activation status. When appropriate, it schedules a background task to automatically
     * deactivate the effect after its duration has elapsed.
     */
    public static simpleDomain<ThrowOnError extends boolean = false>(options: Options<SimpleDomainData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SimpleDomainResponse, SimpleDomainError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/match/activate/simple/{player_id}',
            ...options
        });
    }
    
    /**
     * Delete Match
     * Deletes a match from the database given its ID after verifying delete permissions.
     *
     * This endpoint operation checks whether the specified administrative user has the
     * required permission to delete a match. First, it looks up the permission for deletion
     * on the match model. If the permission exists, it then validates whether the admin
     * either possesses this permission or is a superuser. If the admin is authorized, the
     * function attempts to retrieve the match by its match_id. If the match is found, it
     * will be deleted from the database and the deleted match object is returned. If it is
     * not found, an HTTPException with a 404 status code is raised. If the admin lacks
     * the required permission, a UserException is raised. If the delete permission itself
     * is not defined, an HTTPException with a 403 status code is raised.
     *
     * Parameters:
     * match_id (int): The ID of the match to be deleted, passed as a query parameter.
     * session (Session): The current database session used for executing queries.
     * admin (AdminUser): The admin user attempting to delete the match, used to check authorization.
     *
     * Returns:
     * The deleted match object if the deletion is successful.
     *
     * Raises:
     * HTTPException: If the match does not exist (404 Not Found) or the deletion permission
     * is not defined (403 Forbidden).
     * UserException: If the admin does not have the authorization to delete the match
     * (401 Unauthorized).
     */
    public static deleteMatch<ThrowOnError extends boolean = false>(options: Options<DeleteMatchData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteMatchError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/match/delete/{match_id}',
            ...options
        });
    }
    
}

export class AdminService {
    /**
     * Create Admin
     * Creates an admin user with specified permissions.
     */
    public static createAdmin<ThrowOnError extends boolean = false>(options: Options<CreateAdminData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<CreateAdminResponse, CreateAdminError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/admin/create/{user}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * New Permission
     * for creating new permissions; only doable by a super user
     */
    public static newPermission<ThrowOnError extends boolean = false>(options: Options<NewPermissionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<NewPermissionResponse, NewPermissionError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/admin/new/permission',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Demo Superuser
     */
    public static demoSuperuser<ThrowOnError extends boolean = false>(options: Options<DemoSuperuserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<unknown, DemoSuperuserError, ThrowOnError>({
            url: '/admin/superuser/{user}',
            ...options
        });
    }
    
}

export class ColoniesService {
    /**
     * Get Colonies
     * get all matches
     */
    public static getColonies<ThrowOnError extends boolean = false>(options?: Options<GetColoniesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetColoniesResponse, GetColoniesError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/colony/all',
            ...options
        });
    }
    
}

export class AuthService {
    /**
     * creates a login token
     */
    public static createToken<ThrowOnError extends boolean = false>(options: Options<CreateTokenData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<CreateTokenResponse, CreateTokenError, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            url: '/login',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options?.headers
            }
        });
    }
    
}